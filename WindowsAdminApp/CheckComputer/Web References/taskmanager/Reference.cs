//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CheckComputer.taskmanager {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ComputerBinding", Namespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer")]
    public partial class ComputerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback addInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInformationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ComputerService() {
            this.Url = global::CheckComputer.Properties.Settings.Default.CheckComputer_taskmanager_ComputerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event addInformationCompletedEventHandler addInformationCompleted;
        
        /// <remarks/>
        public event getInformationCompletedEventHandler getInformationCompleted;
        
        /// <remarks/>
        public event getListCompletedEventHandler getListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://taskmanager.zwiazek.net/soap/taskmanager/computer#addInformation", RequestNamespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer", ResponseNamespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool addInformation([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string data) {
            object[] results = this.Invoke("addInformation", new object[] {
                        data});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addInformationAsync(string data) {
            this.addInformationAsync(data, null);
        }
        
        /// <remarks/>
        public void addInformationAsync(string data, object userState) {
            if ((this.addInformationOperationCompleted == null)) {
                this.addInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddInformationOperationCompleted);
            }
            this.InvokeAsync("addInformation", new object[] {
                        data}, this.addInformationOperationCompleted, userState);
        }
        
        private void OnaddInformationOperationCompleted(object arg) {
            if ((this.addInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addInformationCompleted(this, new addInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://taskmanager.zwiazek.net/soap/taskmanager/computer#getInformation", RequestNamespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer", ResponseNamespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getInformation([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id) {
            object[] results = this.Invoke("getInformation", new object[] {
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getInformationAsync(string id) {
            this.getInformationAsync(id, null);
        }
        
        /// <remarks/>
        public void getInformationAsync(string id, object userState) {
            if ((this.getInformationOperationCompleted == null)) {
                this.getInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInformationOperationCompleted);
            }
            this.InvokeAsync("getInformation", new object[] {
                        id}, this.getInformationOperationCompleted, userState);
        }
        
        private void OngetInformationOperationCompleted(object arg) {
            if ((this.getInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInformationCompleted(this, new getInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://taskmanager.zwiazek.net/soap/taskmanager/computer#getList", RequestNamespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer", ResponseNamespace="http://taskmanager.zwiazek.net/soap/taskmanager/computer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getList() {
            object[] results = this.Invoke("getList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getListAsync() {
            this.getListAsync(null);
        }
        
        /// <remarks/>
        public void getListAsync(object userState) {
            if ((this.getListOperationCompleted == null)) {
                this.getListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListOperationCompleted);
            }
            this.InvokeAsync("getList", new object[0], this.getListOperationCompleted, userState);
        }
        
        private void OngetListOperationCompleted(object arg) {
            if ((this.getListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListCompleted(this, new getListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void addInformationCompletedEventHandler(object sender, addInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getInformationCompletedEventHandler(object sender, getInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void getListCompletedEventHandler(object sender, getListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591